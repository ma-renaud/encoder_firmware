INCLUDE(CMakeForceCompiler)

SET(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR cortex-m4)
set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "~/opt/gcc-arm-none-eabi-7-2018-q2/bin")

find_program(ARM_NONE_EABI_GCC arm-none-eabi-gcc)
find_program(ARM_NONE_EABI_GPP arm-none-eabi-g++)
find_program(ARM_NONE_EABI_OBJCOPY arm-none-eabi-objcopy)
find_program(ARM_NONE_EABI_SIZE arm-none-eabi-size)
find_program(ARM_NONE_EABI_DEBUGER arm-none-eabi-gdb)

macro(addLinkerScripts linkerString)
    string (REPLACE ";" " -T " LINKER_SCRIPT_STR "${linkerString}")
    SET(CMAKE_EXE_LINKER_FLAGS "-T ${LINKER_SCRIPT_STR} ${LINKER_FLAGS}")
endmacro(addLinkerScripts)

macro(gcc_program_notfound progname)
    message("**************************************************************************\n")
    message(" ERROR: the arm gcc program ${progname} could not be found\n")
    if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows" OR CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
        message(" you can install the ARM GCC embedded compiler tools from:")
        message(" https://launchpad.net/gcc-arm-embedded/+download ")
    endif()
    message("\n**************************************************************************")
    message(FATAL_ERROR "missing program prevents build")
    return()
endmacro(gcc_program_notfound)

if(NOT ARM_NONE_EABI_GCC)
    gcc_program_notfound("arm-none-eabi-gcc")
endif()
if(NOT ARM_NONE_EABI_GPP)
    gcc_program_notfound("arm-none-eabi-g++")
endif()
if(NOT ARM_NONE_EABI_OBJCOPY)
    gcc_program_notfound("arm-none-eabi-objcopy")
endif()
if(NOT ARM_NONE_EABI_SIZE)
    gcc_program_notfound("arm-none-eabi-size")
endif()
if(NOT ARM_NONE_EABI_DEBUGER)
    gcc_program_notfound("arm-none-eabi-gdb")
endif()

set(CMAKE_CXX_COMPILER_FORCED TRUE)
set(CMAKE_C_COMPILER_FORCED TRUE)
set(CMAKE_C_COMPILER ${ARM_NONE_EABI_GCC})
set(CMAKE_CXX_COMPILER ${ARM_NONE_EABI_GPP})
SET(CMAKE_ASM_COMPILER ${ARM_NONE_EABI_GCC})

SET(COMMON_FLAGS "-mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fmessage-length=0 -fsigned-char -ffunction-sections -fdata-sections -fno-move-loop-invariants -Wall -Wextra -DOS_USE_TRACE_SEMIHOSTING_DEBUG")

SET(CMAKE_C_FLAGS_DEBUG "${COMMON_FLAGS} -O0 -g3 -std=gnu99 -ffreestanding -DDEBUG -DTRACE" CACHE INTERNAL "c compiler flags debug")
SET(CMAKE_CXX_FLAGS_DEBUG "${COMMON_FLAGS} -O0 -g3 -std=gnu++11 -fno-exceptions -fno-rtti -fno-use-cxa-atexit -fno-threadsafe-statics -DDEBUG -DTRACE" CACHE INTERNAL "cxx compiler flags debug")
SET(CMAKE_ASM_FLAGS_DEBUG "-g3" CACHE INTERNAL "asm compiler flags debug")

SET(CMAKE_C_FLAGS_RELEASE "${COMMON_FLAGS} -O3 -g -std=gnu99" CACHE INTERNAL "c compiler flags release")
SET(CMAKE_CXX_FLAGS_RELEASE "${COMMON_FLAGS} -O3 -g -std=gnu++11 -fno-exceptions -fno-rtti -fno-use-cxa-atexit -fno-threadsafe-statics" CACHE INTERNAL "cxx compiler flags release")
SET(CMAKE_ASM_FLAGS_RELEASE "-g" CACHE INTERNAL "asm compiler flags release")

SET(LINKER_FLAGS "-nostartfiles -Xlinker --gc-sections -L\"../ldscripts\" -Wl,-Map,\"${PROJECT_NAME}.map\" --specs=nano.specs")